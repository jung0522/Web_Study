1. VPC 생성 (이미 존재하는 경우 생략 가능)
AWS 관리 콘솔에 로그인합니다.
VPC 서비스로 이동합니다.
VPC 생성 버튼을 클릭하여 새로운 VPC를 생성합니다.
VPC 이름: 원하는 이름 입력
IPv4 CIDR 블록: 10.0.0.0/16 같은 기본 CIDR 블록을 사용
IPv6 CIDR 블록: 필요 시 선택
기본 VPC 사용 여부: 기본적으로 예로 선택되어 있습니다. (필요 시 직접 설정)
2. 서브넷 생성
VPC 안에 서브넷을 생성해야 EC2 인스턴스를 배치할 수 있습니다.

서브넷을 선택하고 서브넷 생성을 클릭합니다.
서브넷을 퍼블릭 또는 프라이빗으로 설정할 수 있습니다.
퍼블릭 서브넷: 인터넷과 연결된 서브넷
프라이빗 서브넷: 인터넷과 직접 연결되지 않은 서브넷
서브넷 이름과 CIDR 블록을 설정하고, 서브넷을 VPC에 연결합니다.
3. 인터넷 게이트웨이 생성 및 연결
퍼블릭 서브넷에서 인터넷과 연결하려면 **인터넷 게이트웨이(IGW)**를 생성해야 합니다.

인터넷 게이트웨이 메뉴로 이동하여 생성을 클릭합니다.
생성한 IGW를 선택하고 VPC에 연결을 클릭하여 VPC와 연결합니다.
4. 라우팅 테이블 설정
인터넷과의 연결을 위해 라우팅 테이블을 설정해야 합니다.

라우팅 테이블 메뉴로 이동하여 새 라우팅 테이블 생성을 클릭합니다.
생성된 라우팅 테이블을 퍼블릭 서브넷에 연결합니다.
라우팅 테이블을 수정하여 인터넷 게이트웨이를 통해 외부와 연결되도록 설정합니다:
목적지: 0.0.0.0/0
타겟: 인터넷 게이트웨이

- 1. EC2 인스턴스 생성하기

2. 로그인 정보를 입력하여 AWS 콘솔에 로그인합니다.

3. AWS 콘솔에서 상단의 검색창에 EC2를 입력합니다.

4. 인스턴스 시작하기

4.1	EC2 대시보드에서 좌측 메뉴의 인스턴스 항목 아래에 있는 인스턴스 시작 버튼을 클릭합니다.

4.2 Amazon Machine Image (AMI) 선택
	**AMI(Amazon Machine Image)**는 운영 체제와 소프트웨어를 포함한 서버 이미지를 의미합니다.
	사용할 운영 체제를 선택합니다. 예를 들어:
	Amazon Linux 2 (기본 Amazon Linux OS)
	Ubuntu (리눅스)
	Windows (윈도우 서버)
4.2	원하는 AMI를 선택한 후 선택을 클릭합니다.

4.3 인스턴스 유형 선택
	인스턴스 유형은 성능과 가격을 결정하는 부분입니다.
	예를 들어 t2.micro는 무료 계층에 포함되어 있으며, 일반적인 작은 테스트 용도로 적합합니다.
	t2.micro를 선택하고 다음: 인스턴스 세부 정보 구성을 클릭합니다.

4.4 인스턴스 세부 정보 설정
	기본적으로는 기본 설정을 그대로 두고 다음: 스토리지 추가를 클릭합니다.
	필요에 따라 스토리지 용량을 추가하거나 수정할 수 있습니다. 기본적으로 8GB가 제공됩니다.

4.5 스토리지 추가
	다음: 태그 추가 버튼을 클릭합니다.
	여기서는 태그를 추가할 수 있습니다. 예를 들어 Key: Name, Value: MyFirstInstance로 태그를 추가할 수 있습니다.

4.6 보안 그룹 설정
	**보안 그룹(Security Group)**은 인스턴스에 접근할 수 있는 IP와 포트를 정의합니다.
	새 보안 그룹 생성을 클릭하여 새로운 보안 그룹을 만듭니다.
	SSH는 22번 포트를 열어줘야 EC2 인스턴스에 연결할 수 있습니다. 소스는 My IP로 설정하면, 자신의 IP에서만 접근할 수 있습니다.
	필요에 따라 HTTP(80), HTTPS(443) 포트도 열 수 있습니다.
	설정을 완료한 후 다음: 검토를 클릭합니다.

4.7 검토 및 인스턴스 시작
	모든 설정을 확인한 후 인스턴스 시작 버튼을 클릭합니다.

4.8	키 페어 선택: 새 키 페어를 생성해야 합니다.
	새 키 페어 생성을 클릭하고 키 이름을 입력한 후, 키 다운로드를 클릭하여 .pem 파일을 다운로드합니다.
	이 파일은 SSH로 EC2 인스턴스에 연결하는 데 필요합니다.

5.	인스턴스 시작을 클릭하여 인스턴스를 시작합니다.

- 2. EC2 인스턴스에 연결하기

- 3. 퍼블릭 IP 주소 확인
	EC2 대시보드에서 인스턴스를 선택하고, 생성한 인스턴스를 클릭합니다.
	퍼블릭 IP 또는 퍼블릭 DNS를 확인합니다. 이 IP 주소는 SSH로 접속하는 데 사용됩니다.

- 4. SSH를 통한 연결 (Linux/Mac)
	다운로드한 .pem 파일에 대해 권한을 수정합니다.
bash
코드 복사
chmod 400 your-key.pem

	your-key.pem은 다운로드한 키 파일입니다.
	이제 SSH 명령어로 EC2 인스턴스에 연결할 수 있습니다:
bash
코드 복사
ssh -i "your-key.pem" ec2-user(ubuntu)@<퍼블릭 IP 주소>

	ec2-user는 Amazon Linux에서 기본 사용자 이름입니다.
	<퍼블릭 IP 주소>는 앞서 확인한 퍼블릭 IP 주소로 대체합니다.

- 4. SSH를 통한 연결 (Windows)
	PuTTY를 다운로드하고 설치합니다. PuTTY 다운로드 링크.
	.pem 파일을 PuTTY에서 사용할 수 있는 .ppk 형식으로 변환해야 합니다.
	PuTTYgen을 실행하고 Load를 클릭한 후 .pem 파일을 선택합니다.
	Save private key를 클릭하여 .ppk 형식으로 저장합니다.
	이제 PuTTY를 사용해 SSH 연결을 합니다:
- 4.1	PuTTY를 실행하고 Host Name (or IP address)에 <퍼블릭 IP 주소>를 입력합니다.
	Connection -> SSH -> Auth에서 Private key file for authentication에 .ppk 파일을 선택합니다.
	Open을 클릭하여 연결합니다.
	사용자 이름 ec2-user(ubuntu)를 입력하면 EC2 인스턴스에 접속할 수 있습니다.

4. 기타 고려 사항
	보안 그룹:
	SSH 연결이 안 되면 보안 그룹에서 SSH 포트(22번)가 열려 있는지 확인합니다.
	소스를 My IP로 설정하여 본인 IP에서만 접근할 수 있도록 할 수 있습니다.
	퍼블릭 IP와 프라이빗 IP:
	퍼블릭 IP는 인터넷에서 EC2 인스턴스에 접근할 수 있는 IP입니다.
	프라이빗 IP는 VPC 내에서만 사용할 수 있는 IP입니다. 프라이빗 IP를 통해 EC2 인스턴스 간에 연결을 할 수 있습니다.

----- 도커 파일 생성

# JDK 17을 기반으로 하는 이미지를 사용
FROM openjdk:17-jdk-slim

# 애플리케이션 JAR 파일 위치 설정
ARG JAR_FILE=build/libs/*.jar

# 컨테이너에서 JAR 파일을 실행할 위치로 복사
COPY ${JAR_FILE} app.jar

# 애플리케이션 실행 명령
ENTRYPOINT ["java", "-jar", "/app.jar"]

# ./gradlew build jar 파일 생성
# 빌드 결과물은 기본적으로 build/libs/ 디렉토리에 저장됩니다.

# docker build -t docker1 .
# docker build: Docker 이미지를 빌드하는 명령어다.
#-t docker1: 생성할 이미지에 docker1이라는 태그를 붙인다.
#.: 현재 디렉토리를 빌드 컨텍스트로 지정합니다. 여기서 Docker는 Dockerfile을 찾는다.

4. Docker 서버 추가
IntelliJ에서 File > Settings > Build, Execution, Deployment > Docker로 이동합니다.
**Add (+)**를 클릭하고 SSH를 선택합니다.
SSH 설정을 다음과 같이 구성합니다:
Host: EC2의 퍼블릭 IP (예: 43.203.118.177)
Port: 22
Authentication: 키 파일 선택 (PEM 파일)
User name: EC2 사용자 이름 (ubuntu)
연결 테스트 후 저장합니다.

------ Permission denied 오류 해결

Permission denied 오류가 발생하는 이유는 key-pair.pem 파일의 권한이 여전히 올바르지 않아서 SSH 클라이언트가 해당 키를 사용할 수 없기 때문입니다. 이 문제를 해결하려면 다시 한번 권한을 수정해야 합니다.

Windows 환경에서는 scp 명령어가 SSH 키 파일의 권한이 너무 열려 있거나 다른 시스템적 문제가 있을 때 Permission denied 오류가 발생할 수 있습니다. 이 경우 pem 파일의 권한을 좀 더 제한적으로 설정해야 합니다.

해결 방법
1. PowerShell을 통해 key-pair.pem 권한을 수정
Windows PowerShell을 사용하여 key-pair.pem 파일에 대한 권한을 더 엄격하게 제한할 수 있습니다.

PowerShell을 관리자 권한으로 실행합니다.

시작 메뉴에서 PowerShell을 검색하고, 마우스 오른쪽 클릭 후 **"관리자 권한으로 실행"**을 선택합니다.
key-pair.pem 권한 수정: 아래 명령어를 입력하여 해당 파일에 대한 상속을 제거하고 권한을 제한합니다.

powershell
코드 복사
icacls "C:\Users\User\Desktop\Web_Study\key-pair.pem" /inheritance:r
icacls "C:\Users\User\Desktop\Web_Study\key-pair.pem" /grant:r "${env:USERNAME}:(R)"
첫 번째 명령어는 상속을 제거하여 다른 사용자에게 권한이 전달되지 않도록 합니다.
두 번째 명령어는 현재 사용자에게 읽기 권한만 부여합니다. (이 권한이 없으면 SSH 연결이 안 될 수 있습니다)

5 SCP로 Docker 이미지 전송
SCP는 SSH를 통해 파일을 안전하게 전송할 수 있는 명령어입니다.

5.1 Docker 이미지 저장 (IntelliJ 환경에서 실행)
로컬 Docker 환경에서 EC2로 전송할 이미지를 .tar 파일로 저장해야 합니다:

bash
코드 복사
docker save <이미지이름> > <파일이름>.tar
예:

bash
코드 복사
docker save -o <저장할 도커 이름>.tar <이미지 이름>
이 명령어는 현재 Docker 환경에 있는 docker1 이미지를 docker1.tar로 저장합니다.

6. SCP로 Docker 이미지 전송
다음 명령어를 사용하여 EC2로 .tar 파일을 전송합니다:

Windows (Command Prompt 또는 PowerShell 사용):
bash
코드 복사
scp -i <키파일경로>.pem <이미지파일경로>.tar ubuntu@<EC2_PUBLIC_IP>:~
예:

bash
코드 복사
scp -i C:\Users\User\Desktop\key-pair.pem C:\Users\User\Desktop\docker1.tar ubuntu@3.36.61.23:~

Linux/MacOS:
bash
코드 복사
scp -i /path/to/key.pem /path/to/docker1.tar ubuntu@<EC2_PUBLIC_IP>:~

6. EC2에서 Docker 이미지 로드
EC2에 접속한 후, .tar 파일을 Docker 이미지로 로드합니다.


docker load -i docker1.tar <이미지 이름>

docker run -d -p 8080:8080 <이미지 이름>


docker run -d -p 80:8080 docker1 명령어는 Docker 컨테이너를 실행할 때 사용되는 옵션들입니다. 각 부분의 의미를 설명하겠습니다:

명령어 구성:
docker run: 새로운 Docker 컨테이너를 실행하는 명령어입니다.

-d (detached mode):

-d 옵션은 컨테이너를 백그라운드에서 실행하도록 합니다.
이 옵션을 사용하면 터미널을 차지하지 않고, 실행된 컨테이너는 백그라운드에서 동작합니다.
-p 80:8080:

-p 옵션은 포트 매핑을 설정하는 것입니다.
80:8080은 호스트의 80번 포트를 컨테이너의 8080번 포트에 매핑하라는 뜻입니다. 
즉, 호스트(EC2 서버)의 80번 포트로 들어오는 요청을 컨테이너 내부의 8080번 포트로 전달합니다.
이를 통해 http://<EC2_IP>/로 접근하면 Docker 컨테이너 내부에서 실행 중인 애플리케이션에 접근할 수 있게 됩니다.
docker1:

이 부분은 실행할 Docker 이미지를 지정하는 것입니다. docker1은 이미지 이름이거나 태그입니다.
docker1이라는 이름의 이미지를 기반으로 컨테이너를 실행하게 됩니다.


docker ps로 <컨테이너_ID 또는 컨테이너_이름> 확인 
ex) 37f4c708590e 

docker stop

docker stop <컨테이너_ID 또는 컨테이너_이름>

다시 시작

docker start

docker start <컨테이너_ID 또는 컨테이너_이름>

docker rm <컨테이너_ID 또는 컨테이너_이름>


